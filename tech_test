
import hashlib
import time

def calculate_hash(block_data, nonce):
    """
    Calculates the SHA-256 hash of the block by concatenating block data and the nonce.
    """
    block_content = str(block_data) + str(nonce)
    return hashlib.sha256(block_content.encode()).hexdigest()

def is_valid_hash(hash, difficulty):
    """
    Checks if a hash is valid based on the given difficulty.
    The difficulty is represented by the number of leading zeros required in the hash.
    """
    target = '0' * difficulty
    return hash.startswith(target)

def mine_block(block_data, difficulty):
    """
    Simulates the mining process.
    Generates hashes by incrementing the nonce until a hash meets the difficulty level.
    """
    nonce = 0
    start_time = time.time()
    
    while True:
        hash = calculate_hash(block_data, nonce)
        if is_valid_hash(hash, difficulty):
            end_time = time.time()
            return nonce, hash, end_time - start_time
        nonce += 1

def simulate_mining(block_data, difficulty_levels):
    """
    Simulates mining for multiple difficulty levels and displays the time taken.
    """
    for difficulty in difficulty_levels:
        print(f"Mining block with difficulty {difficulty}...")
        nonce, valid_hash, elapsed_time = mine_block(block_data, difficulty)
        print(f"Nonce found: {nonce}")
        print(f"Valid hash: {valid_hash}")
        print(f"Time taken: {elapsed_time:.2f} seconds\n")

# Example block data
block_data = "Block 1: Transaction data"

# Simulate mining with different difficulty levels
difficulty_levels = [2, 3, 4]  # Increase for higher difficulty levels
simulate_mining(block_data, difficulty_levels)
